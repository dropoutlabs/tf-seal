version: 2

variables:
  bootstrap: &bootstrap
    run:
      name: install deps
      command: |
        apt update
        apt install -y pkg-config zip g++ zlib1g-dev unzip python3 cmake curl git rsync

        curl -OL https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        bash Miniconda3-latest-Linux-x86_64.sh -b -f
        ../miniconda3/bin/conda create -y -n py37 python=3.7 2> /dev/null || true
        ../miniconda3/envs/py37/bin/python -m venv venv
        . venv/bin/activate

        curl -OL https://github.com/bazelbuild/bazel/releases/download/0.26.1/bazel-0.26.1-installer-linux-x86_64.sh
        bash bazel-0.26.1-installer-linux-x86_64.sh --user

        curl -OL https://storage.googleapis.com/tf-pips/tf-c%2B%2B17-support/tf_nightly-1.14.0-cp37-cp37m-linux_x86_64.whl
        pip install tf_nightly-1.14.0-cp37-cp37m-linux_x86_64.whl

jobs:
  build-linux:
    docker:
      - image: ubuntu:19.04
    working_directory: ~/repo
    steps:
      - checkout
      - *bootstrap
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            export PATH=$PATH:/root/bin
            make clean
            make test

  build-pip-linux:
    docker:
      - image: ubuntu:19.04
    working_directory: ~/repo
    steps:
      - checkout
      - *bootstrap
      - run:
          name: make pip package
          command: |
            . venv/bin/activate
            export PATH=$PATH:/root/bin
            make clean
            make pypi-build
      - persist_to_workspace:
          root: artifacts
          paths:
            - "*.whl"

  upload-pip-linux:
    docker:
      - image: ubuntu:19.04
    working_directory: ~/repo
    steps:
      - run:
          name: certs
          command: |
            apt update
            apt install -y ca-certificates
      - checkout
      - attach_workspace:
          at: artifacts
      - *bootstrap
      - run:
          name: make pip package
          command: |
            . venv/bin/activate
            export PATH=$PATH:/root/bin
            make clean
            ARTIFACT_LOCATION=/tmp/workspace/artifacts make push

workflows:
  version: 2
  build:
    jobs:
      - build-linux:
          filters:
            tags:
              # In order for the 'deploy' job to run, we must first kick off
              # the build job on all tags. By default, Circle CI only kicks off
              # builds on tags if a filter is defined.
              only: /^(?:[0-9]+)\.(?:[0-9]+)\.(?:[0-9]+)(?:(\-rc[0-9]+)?)$/
      - build-pip-linux:
          requires:
            - build-linux
          filters:
            tags:
              only: /^(?:[0-9]+)\.(?:[0-9]+)\.(?:[0-9]+)(?:(\-rc[0-9]+)?)$/
      - upload-pip-linux:
          requires:
            - build-pip-linux
          filters:
            tags:
              only: /^(?:[0-9]+)\.(?:[0-9]+)\.(?:[0-9]+)(?:(\-rc[0-9]+)?)$/
          context: pypi
